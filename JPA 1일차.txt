IntelliJ Community Edition 다운로드 및 설치
Next - Next - 바탕화면 바로가기(선택), ADD "bin" 선택, java (모두 추후에 설정 가능) - Install - 재부팅

새 프로젝트 생성
New Project - java_basic - 경로 설정 - Create Git repository - Build system은 기본(IntelliJ) - Create
프로젝트 내부에 readme 파일 생성
프로젝트 우클릭 - File - README.md

인텔리제이 설정
쉬프트 2번 - plugins 검색 후 선택 - plugins 메뉴 안에서 Marketplace 탭에서 korean 검색 후 Korean Language Pack 설치 - Restart IDE 버튼 눌러서 재실행

테마 및 아이콘 테마 설치
퀵 메뉴(쉬프트 2번) - 플러그인 - material - Atom Material Icons, Material Theme UI 설치 후 다시 시작
파일 - 설정(Ctrl + Alt + S) - 테마 - 모양 - 원하는 테마 선택
설정 - 마우스 - 에디터 - 일반 - 마우스 컨트롤 체크 - 모든 에디터 선택
글꼴 - 원하는 글꼴 선택 - 옵션 조정(크기, 줄 간격) - 이음자 활성화 체크(선택) - 적용 후 확인
현재 에디터 글꼴도 변경 후 적용 확인, 마우스 컨트롤 동작하는지 확인
퀵 메뉴 - 플러그인 - key pro 검색 - Key Promoter X 설치 , trans 검색 - Translation 설치 후 다시 시작

인코딩 설정도 바꿔주기

단축키들
에디터창
Ctrl + Space : 자동 완성
Alt + Enter : 인텔리제이 팁 (지역 변수 추가 등)

Alt + 1 : 프로젝트 창 열고 닫기
	프로젝트 창 열린 상태에서 방향키로 이동 가능
Alt + Insert : 프로젝트에 포커스 - 새 파일 생성
	에디터에 포커스 - 생성자 Getter Setter 등 생성


스프링 프로젝트 생성
Spring Initializr 접속 - https://start.spring.io/
Project -> Gradle - Groovy
Language -> Java
Spring Boot -> 2.7.12
스프링 부트 3 버전부터는 자바 11 사용 불가능. 오라클 자바 패키지 몇개도 빠짐(javax 등).
Project Metadata
Group -> com.spring
Artifact -> jpa
Packaging -> Jar
Java -> 11
Dependencies -> ADD DEPENDENCIES... (Ctrl + B)
	Lombok, Spring Web, Spring Data JPA, MySQL Driver 추가
GENERATE (CTRL + ⏎)

다운로드된 압축 파일 C:\Work 폴더에 압축 해제

인텔리제이 실행
인텔리제이에서만 프로젝트 제거하는 법 - 프로젝트 우클릭 - 모듈 제거
파일 - 열기 - 경로 찾아서 열기 - 프로젝트 신뢰 - 새 창(선택) - 빌드 진행 기다리기
완료되면 퀵 메뉴 - 플러그인 - Lombok 있는지 확인
퀵 메뉴 - 설정 - 어노테이션 검색 (컴파일러) - 어노테이션 처리 활성화 체크 - 적용 - 확인
HELP.md 파일명 README.md로 변경 -> 우클릭 - 리팩토링 - 이름 변경 - 내용 작성
상단 메뉴 - VCS - Git 저장소 생성 - 폴더 경로 확인 후 확인
터미널 메뉴(Alt + F12) - git rm -r --cached : 캐시 날리기
설정 - GitHub - 계정 추가 - GitHub를 통해 로그인 - 로그인
커밋 탭(Alt + 0) - 파일 체크로 선택 - 커밋 메시지 작성 -> initail commit - 커밋
상단 Git 메뉴 - GitHub - GitHub에 프로젝트 공유 - 저장소 이름 -> spring_jpa_practice - 비공개 체크 해제 - 원격 이름은 그대로 사용 - 공유
Git - 원격 관리로 확인



프로젝트 설정
src/main/resources/application.properties -> application.yml로 리팩터링(이름 변경 Shift + F6) - 내용 작성

데이터베이스 사용을 위해 MySQL Workbench 실행
root 계정 접속 - jpa DB 생성 -> CREATE DATABASE jpa;

yml 마저 작성
#이 주석

패키지 생성 - com.spring.jpa.chap01_basic.entity
클래스 생성 - Product
@Entity
	- JPA가 실행될 때 테이블을 클래스에 맞게 생성해주는 어노테이션
@Id
	- Entity 어노테이션에 의해 테이블을 생성할 때 primary key로 설정할 값에 사용하는 어노테이션
@Column(name = "컬럼명")
	- 클래스에서 사용하고 싶은 변수명과 컬럼명이 다를 때 원하는 컬럼명으로 설정해주는 어노테이션
	- (name = "컬럼명", nullable = false, length = 30) 형식으로 원하는 옵션도 추가 가능
@Table(name = "테이블명")
	- 클래스에서 사용하고 싶은 클래스명과 테이블명이 다를 때 원하는 테이블명으로 설정해주는 어노테이션
@GeneratedValue(strategy = GenerationType.IDENTITY)
	- 기본 키의 생성 전략을 지정. 
	- GenerationType. 이후에 원하는 값으로 설정
	- 설정하지 않으면 Auto가 기본값. - 특정 상황에서 문제가 될 수 있으니 비추천.

JPA에서 ENUM 타입을 사용해서 colum을 생성하면 자동으로 인덱스 값으로 변환해서 사용.
@Enumerated(EnumType.STRING)
	- (EnumType."타입")
	- Enum 타입으로 선언한 값을 선언한 값 컬럼에서도 그대로 사용하고 싶을 때 사용
@CreationTimestamp
	- 값이 생성될 때 생성된 시간 값을 자동으로 넣어주고 싶을 때 사용
@Column(updatable = false)
	- 값을 수정 불가능하게 하고 싶을 때 사용
@UpdateTimestamp
	- 값이 수정될 때 수정된 시간을 자동으로 넣어주고 싶을 때 사용

패키지 생성 - com.spring.jpa.chap01_basic.repository
인터페이스 생성 - ProductRepository
ProductRepository
- extends JpaRepository<Product, Long>

- extends JpaRepository<Generic, Generic>
- 1번째 제너릭 : 현재 인터페이스에서 사용할 엔티티(테이블)
- 2번째 제너릭 : primary key 타입 (제너릭이므로 객체 타입으로 선언(대문자))

Ctrl + Shift + T - 새 테스트 생성
@SpringBootTest 어노테이션 주입
내부에서 @Autowired 사용하여 인터페이스 주입
@Transactional 주입 (springframework 사용)
@Rollback(false) - true일 경우 테스트 후 롤백

템플릿 설정
설정 - 에디터 - 라이브 템플릿 - Java - + 버튼 클릭 - 라이브 템플릿 - 약어 -> tdd - 정의 -> Java 체크 - 템플릿 텍스트 작성 - 적용 - 확인

Ctrl + B - 선언부로 이동

@Builder - 객체 생성(초기화)을 좀 더 쉽게 도와주는 어노테이션

테스트를 활용해서 JPA 사용해보기
save(객체명) 메서드 -> DB에 해당 객체를 데이터로 insert -> return 값
deleteById(id) 메서드 -> DB에 해당 id를 가진 데이터 delete

value값 ?로 나오는 것 해결하기
application.yml로 이동
logging.level:
  org.hibernate.SQL: debug
추가하기
show-sql: true 은 삭제 (log로 출력할 것이므로 더이상 필요 없음)

메이븐 레파지토리 이동

build.gradle로 이동
dependencies 내부에 붙여넣기
코끼리 아이콘 클릭하여 적용하기



findAll() 메서드 -> 테이블값 전체 select
findById(id) 메서드 -> 주어진 primary key(id) 값으로 select

Optional<> 객체
조회된 값이 없을 때 NullPointException을 방지하기 위해 나온 객체
ifPresent(함수) - 메서드를 실행한 Optional 객체에 값이 존재하면 함수를 실행
